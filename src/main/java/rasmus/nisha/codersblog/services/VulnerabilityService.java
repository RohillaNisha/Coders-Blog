package rasmus.nisha.codersblog.services;

import org.springframework.stereotype.Service;
import rasmus.nisha.codersblog.dtos.ReportVulnerabilityDto;
import rasmus.nisha.codersblog.entites.Blog;
import rasmus.nisha.codersblog.entites.ReportedVulnerabilities;
import rasmus.nisha.codersblog.entites.User;
import rasmus.nisha.codersblog.repositories.VulnerabilityRepo;

import java.util.List;

@Service
public class VulnerabilityService {

    private final VulnerabilityRepo vulnerabilityRepo;

    public VulnerabilityService(VulnerabilityRepo vulnerabilityRepo) {
        this.vulnerabilityRepo = vulnerabilityRepo;
    }

    public List<ReportedVulnerabilities> getAllReports() {
        return vulnerabilityRepo.findAll();
    }

    public boolean reportAVulnerability(ReportVulnerabilityDto reportVulnerabilityDto) {
        try {
            if (reportVulnerabilityDto.getDescription() == null || reportVulnerabilityDto.getDescription().isBlank() || reportVulnerabilityDto.getDescription().isEmpty() ) {
                throw new IllegalArgumentException("Description can't be blank");
            }
            if (reportVulnerabilityDto.getReportedBy() == null || reportVulnerabilityDto.getReportedBy().isBlank() || reportVulnerabilityDto.getReportedBy().isEmpty()) {
                throw new IllegalArgumentException("Report Anonymous if you don't want to disclose your identity");
            }
            ReportedVulnerabilities newVulnerability = ReportedVulnerabilities.builder()
                    .vulCategory(reportVulnerabilityDto.getVulCategory())
                    .description(reportVulnerabilityDto.getDescription())
                    .reportedBy(reportVulnerabilityDto.getReportedBy())
                    .contactDetails(reportVulnerabilityDto.getContactDetails())
                    .build();
            vulnerabilityRepo.save(newVulnerability);
            return true;

        } catch(Exception e){
            e.printStackTrace();

        }

        return false;
    }
}
